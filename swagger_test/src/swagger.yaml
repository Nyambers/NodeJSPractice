# swagger.yaml

swagger: '2.0'
info:
    version: 1.0.0
    title: Swagger Tests
    license:
      name: Proprietary
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
  - https

paths:
  '/swagger.json':
    get:
      tags:
        - Spec
      operationId: retrieveSpec
      description: Retrieve OpenAPI spec
      responses:
        '200':
          description: Successful
          schema:
            type: object

  '/register':
    post:
      description: Admin registers a new user
      operationId: adminRegisterUser
      tags:
        - Register
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserRegisterBase'
      responses:
        '200':
          description: User is Registered
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            type: object
        default:
          description: Unexpected Error
          schema:
            type: object

  '/login':
    post:
      description: User log in
      operationId: userLogIn
      tags:
        - LogIn
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserLogInBase'
      responses:
        '200':
          description: User is logged in
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            type: object
        default:
          description: Unexpected Error
          schema:
            type: object

  '/delete-user':
    delete:
      description: Admin deletes a user
      operationId: adminDeleteUser
      tags:
        - DeleteUser
      parameters:
        - name: userId
          in: query
          type: string
      responses:
        '200':
          description: User is deleted
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            type: object
        default:
          description: Unexpected Error
          schema:
            type: object

  '/posts':
    post:
      description: Get all posts
      operationId: getPosts
      tags:
        - GetPosts
      responses:
        '200':
          description: List of posts
          schema:
            $ref: '#/definitions/PostsBase'

definitions:
  PostsBase:
    required: 
      - owner
      - title
      - body
    properties:
      owner:
        type: string
      title:
        type: string
      body:
        type: string

  UserRegisterBase:
    required: 
      - password
      - email
      - userId
      - userIdType
      - payload
      - policyNumber
    properties:
      password:
        type: string
      email:
        type: string
      userId:
        type: string
      userIdType:
        type: string
      payload:
        type: string
      policyNumber:
        type: string

  UserLogInBase:
    required: 
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string